// PawnIO - Input-output driver
// Copyright (C) 2023  namazso <admin@namazso.eu>
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
// 
// Linking PawnIO statically or dynamically with other modules is making a
// combined work based on PawnIO. Thus, the terms and conditions of the GNU
// General Public License cover the whole combination.
// 
// In addition, as a special exception, the copyright holders of PawnIO give
// you permission to combine PawnIO program with free software programs or
// libraries that are released under the GNU LGPL and with independent modules
// that communicate with PawnIO solely through the device IO control
// interface. You may copy and distribute such a system following the terms of
// the GNU GPL for PawnIO and the licenses of the other code concerned,
// provided that you include the source code of that other code when and as
// the GNU GPL requires distribution of source code.
// 
// Note that this exception does not include programs that communicate with
// PawnIO over the Pawn interface. This means that all modules loaded into
// PawnIO must be compatible with this licence, including the earlier
// exception clause. We recommend using the GNU Lesser General Public License
// version 2.1 to fulfill this requirement.
// 
// For alternative licensing options, please contact the copyright holder at
// admin@namazso.eu.
// 
// Note that people who make modified versions of PawnIO are not obligated to
// grant this special exception for their modified versions; it is their
// choice whether to do so. The GNU General Public License gives permission
// to release a modified version without this exception; this exception also
// makes it possible to release a modified version which carries forward this
// exception.

#include <ntddk.h>
#include <bcrypt.h>
#include <cstdint>
#include <malloc.h>

#define SHA256_LEN (32)

static NTSTATUS calculate_sha256(const void* data, size_t size, uint8_t* sha256)
{
  BCRYPT_ALG_HANDLE alg_handle{};
  auto status = BCryptOpenAlgorithmProvider(
    &alg_handle,
    BCRYPT_SHA256_ALGORITHM,
    nullptr,
    0
  );

  if (NT_SUCCESS(status))
  {
    ULONG len = 0, rlen = 0;
    status = BCryptGetProperty(
      alg_handle,
      BCRYPT_OBJECT_LENGTH,
      (PUCHAR)&len,
      sizeof(len),
      &rlen,
      0
    );

    if(NT_SUCCESS(status) && rlen == sizeof(len))
    {
      const auto hash_obj = _alloca(len);

      BCRYPT_HASH_HANDLE hash_handle{};
      status = BCryptCreateHash(
        alg_handle,
        &hash_handle,
        (PUCHAR)hash_obj,
        len,
        nullptr,
        0,
        0
      );

      if (NT_SUCCESS(status))
      {
        status = BCryptHashData(
          hash_handle,
          (PUCHAR)const_cast<void*>(data),
          (ULONG)size,
          0
        );

        if (NT_SUCCESS(status))
        {
          status = BCryptFinishHash(hash_handle, sha256, SHA256_LEN, 0);
        }

        BCryptDestroyHash(hash_handle);
      }
    }

    BCryptCloseAlgorithmProvider(alg_handle, 0);
  }

  return status;
}

static NTSTATUS verify_rsa(const uint8_t* sha256, const uint8_t* sig, size_t sig_len, const uint8_t* pubkey, size_t pubkey_len)
{
  BCRYPT_ALG_HANDLE alg_handle{};
  auto status = BCryptOpenAlgorithmProvider(
    &alg_handle,
    BCRYPT_RSA_ALGORITHM,
    nullptr,
    0
  );

  if (NT_SUCCESS(status))
  {
    BCRYPT_KEY_HANDLE pubkey_handle{};

    status = BCryptImportKeyPair(
      alg_handle,
      nullptr,
      BCRYPT_RSAPUBLIC_BLOB,
      &pubkey_handle,
      const_cast<PUCHAR>(pubkey),
      (ULONG)pubkey_len,
      0
    );


    if (NT_SUCCESS(status))
    {
      BCRYPT_PKCS1_PADDING_INFO padding;
      padding.pszAlgId = BCRYPT_SHA256_ALGORITHM;

      status = BCryptVerifySignature(
        pubkey_handle,
        &padding,
        const_cast<PUCHAR>(sha256),
        SHA256_LEN,
        const_cast<PUCHAR>(sig),
        (ULONG)sig_len,
        BCRYPT_PAD_PKCS1
      );

      BCryptDestroyKey(pubkey_handle);
    }

    BCryptCloseAlgorithmProvider(alg_handle, 0);
  }

  return status;
}

constexpr static uint8_t k_pubkey[] = { 0x52, 0x53, 0x41, 0x31, 0x00, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0xB5, 0x45, 0xB8, 0x15, 0xF0, 0x2A, 0xEB, 0xCA, 0xC9, 0x35, 0x8F, 0x54, 0x15, 0x83, 0x12, 0x2C, 0xC3, 0xF3, 0x5E, 0x1E, 0xE7, 0xFB, 0xD3, 0xE1, 0x68, 0x73, 0x3B, 0x36, 0xC0, 0x5C, 0x6F, 0xD3, 0xBA, 0xF4, 0xD0, 0xA9, 0x9B, 0x6E, 0x9C, 0x66, 0x43, 0x2F, 0xC9, 0xB2, 0x82, 0xDF, 0x24, 0x6D, 0x8F, 0x5F, 0x45, 0xAF, 0x02, 0xDD, 0x6A, 0xEF, 0x04, 0x01, 0x74, 0x69, 0xC3, 0x20, 0x70, 0xDB, 0x3F, 0x05, 0x97, 0x9E, 0xE6, 0x01, 0x6B, 0x9E, 0x28, 0x53, 0x03, 0x59, 0x02, 0x98, 0x4C, 0x41, 0xAB, 0xB2, 0x56, 0x5F, 0xD6, 0x24, 0x98, 0xD1, 0xB3, 0xF9, 0xF8, 0x46, 0xC7, 0x21, 0x4B, 0xDF, 0xFD, 0xF2, 0x88, 0x2A, 0xCE, 0xDC, 0x75, 0x36, 0x40, 0xC2, 0x5E, 0x0B, 0x26, 0x17, 0x7A, 0x3D, 0xD6, 0x34, 0xD7, 0x47, 0xD6, 0x61, 0xE1, 0x33, 0xD7, 0x7A, 0x00, 0x7E, 0x9F, 0xEB, 0x92, 0x33, 0x52, 0x65, 0x8E, 0xF8, 0x7C, 0x49, 0xD4, 0x22, 0xB8, 0x22, 0xBD, 0x59, 0x56, 0xBC, 0xD5, 0x1B, 0x64, 0x4C, 0x91, 0x50, 0xAB, 0x1F, 0x67, 0x9F, 0x84, 0xDD, 0x8B, 0x4F, 0xFC, 0x28, 0x26, 0x52, 0x36, 0x49, 0x67, 0x0D, 0x6C, 0xA4, 0xA1, 0xAA, 0xEC, 0x2B, 0xB0, 0x05, 0x09, 0x08, 0x20, 0x38, 0x82, 0xAE, 0x47, 0xB9, 0x3C, 0xAE, 0x50, 0xBF, 0x93, 0x69, 0x94, 0xB5, 0x98, 0x7C, 0xA8, 0x2E, 0xA9, 0x8E, 0x7B, 0xC2, 0xB2, 0x12, 0xB9, 0xB1, 0x62, 0x46, 0x3C, 0xED, 0x24, 0x9C, 0x89, 0xE0, 0xB8, 0x46, 0x26, 0x1A, 0x5A, 0x08, 0xD6, 0xF0, 0x2A, 0xA3, 0x28, 0xB6, 0x73, 0x60, 0xAE, 0xC3, 0x2D, 0x4C, 0x5A, 0x24, 0xF1, 0x58, 0x4C, 0x51, 0xD2, 0x66, 0xE9, 0xD9, 0x61, 0x98, 0x4D, 0xDE, 0x94, 0xD8, 0x44, 0x1F, 0x62, 0xF6, 0x4E, 0xF9, 0x73, 0x44, 0xA4, 0x7A, 0x2C, 0x2D, 0xC1, 0xDB, 0x4F, 0x58, 0xD6, 0x70, 0xB2, 0x6E, 0xE8, 0xD9, 0x50, 0x01, 0x35, 0x4F, 0x39, 0x49, 0x2E, 0x09, 0x76, 0x47, 0x9C, 0x3C, 0x7E, 0x72, 0x33, 0xCA, 0x13, 0xD7, 0x29, 0x82, 0xFB, 0x14, 0xAD, 0x4E, 0xC3, 0xA6, 0xC6, 0x4C, 0x18, 0x84, 0xB5, 0x83, 0x7A, 0xF0, 0x99, 0xBA, 0x1D, 0x56, 0xD2, 0xA2, 0xDF, 0x14, 0x34, 0x01, 0x6F, 0x83, 0x8D, 0xB8, 0xA0, 0x16, 0x2C, 0x36, 0x90, 0x0F, 0x96, 0x2D, 0x3B, 0x80, 0x58, 0x5C, 0xE7, 0x9D, 0x0D, 0x73, 0x38, 0xCA, 0xEE, 0x43, 0xF7, 0xC0, 0x37, 0xA4, 0xEA, 0xDD, 0x76, 0xCC, 0xA2, 0xF3, 0x54, 0xC8, 0x45, 0xC9, 0xBE, 0x3F, 0xCE, 0xAA, 0x98, 0x2F, 0x4C, 0x97, 0x87, 0x56, 0x00, 0x81, 0x6A, 0x7A, 0x41, 0x52, 0xF7, 0xF9, 0x0D, 0xEE, 0x5D, 0xB6, 0x05, 0x1F, 0x40, 0x9F, 0xDE, 0x75, 0x97, 0xD5, 0x8F, 0x28, 0x04, 0xDA, 0x57, 0xA2, 0x76, 0x52, 0x49, 0x35, 0xAC, 0x54, 0xF3, 0x09, 0xA6, 0x68, 0xEC, 0x84, 0xB8, 0x87, 0xD9, 0xBE, 0x26, 0xED, 0xFD, 0x75, 0x7D, 0x2A, 0x1B, 0x55, 0x18, 0x31, 0xA7, 0xA0, 0x44, 0xC5, 0x4A, 0x05, 0xD2, 0x55, 0x44, 0x70, 0x1D, 0x35, 0xE4, 0x61, 0x03, 0x5D, 0x82, 0x3C, 0x48, 0x40, 0x5F, 0x58, 0x64, 0x4E, 0xFF, 0xA6, 0xA1, 0x24, 0x7A, 0xAC, 0xF0, 0xF8, 0x3F, 0x9E, 0x9B, 0xE0, 0x53, 0x04, 0x55, 0xB1, 0xED, 0xDC, 0xC0, 0xC9, 0x9E, 0x5E, 0x31, 0x46, 0x09, 0x83, 0x51, 0x41, 0xBD, 0x41, 0x73, 0xC0, 0xD8, 0x36, 0x23, 0xAE, 0x0B, 0xDF, 0x89, 0x67, 0x2A, 0xC7, 0x56, 0x36, 0xA8, 0xE2, 0x76, 0xB8, 0xCB, 0x75, 0xA1, 0xF0, 0x7C, 0xAC, 0x4D, 0xCD, 0x56, 0xBB, 0x6A, 0x03, 0xCA, 0x7A, 0x89, 0xD2, 0x06, 0xE9, 0x02, 0x48, 0x17, 0x2F, 0xCF, 0xBC, 0xC1, 0xB6, 0xF7, 0xBF, 0x8A, 0xC1, 0xA7, 0x9B };

NTSTATUS check_signature(const void* mem, size_t len, const uint8_t* sig, size_t sig_len)
{
  uint8_t sha256[SHA256_LEN];
  const auto status = calculate_sha256(mem, len, sha256);
  if (!NT_SUCCESS(status))
    return status;

  return verify_rsa(sha256, sig, sig_len, k_pubkey, sizeof(k_pubkey));
}
